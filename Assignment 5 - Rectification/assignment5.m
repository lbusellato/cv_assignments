%--------------------------------------------------------------------------
%
%   assignment5.m
%
%   This script implements the computation of the homographies for a pair of
%   stereo images. The homographies are then used to rectify both images,
%   showing that the known 3D points are projected to the same places in the
%   rectified images as in the original images. Then 5 random points are
%   picked to draw epipolar lines on the rectified left image, showing that
%   the epipolar lines now become horizontal and parallel to each other.
%
%   Author: Lorenzo Busellato, VR472249, 2023
%
%--------------------------------------------------------------------------

%% SETUP
clearvars;
close all;
clc;
addpath("./calib/");
addpath('../functions/');
% Load in the calibration data generated by the Camera Calibration Toolbox
stereo = load('calib/Calib_Results_stereo.mat');
% Load in the images
imgl = im2gray(imread('calib/left01.jpg'));
imgr = im2gray(imread('calib/right01.jpg'));
% Known 3D points in the world reference frame:
M = stereo.X_left_1;
M = [M; ones(1, size(M, 2))];

%% COMPUTATION OF THE FULL PERSPECTIVE MATRICES
% Compute the left camera perspective matrix:
Rl = rodrigues(stereo.omc_left_1);
tl = stereo.Tc_left_1;
Gl = [Rl, tl; 0 0 0 1];
Kl = stereo.KK_left;
Pl = Kl * [eye(3) zeros(3, 1)] * Gl;
% Compute the right camera perspective matrix:
Rr = stereo.R;
tr = stereo.T;
Gr = [Rr tr; 0 0 0 1];
Kr = stereo.KK_right;
Pr = Kr * [eye(3) zeros(3, 1)] * Gr;

%% PROJECTION OF THE KNOWN 3D POINTS
% Project the known 3D points onto both images
ml = proj(M, Pl);
mr = proj(M, Pr*Gl);
% Plot the points on the images
figure();
subplot(221); imshow(imgl); hold on; title('Left image');
plot(ml(1, :), ml(2, :), 'g+');
subplot(222); imshow(imgr); hold on; title('Right image');
plot(mr(1, :), mr(2, :), 'r+');

%% COMPUTATION OF THE HOMOGRAPHIES
[Hl, Hr, Pnl, Pnr] = homographyFromCalib(Pr, Kl);

%% IMAGE RECTIFICATION
% Applying the homographies to the known points
mlr = applyHomography(ml, Hl);
mrr = applyHomography(mr, Hr);
% Image rectification
imglr = uint8(imwarp(imgl, Hl));
imgrr = uint8(imwarp(imgr, Hr));
% Plot the points onto the rectified images
subplot(223); title('Rectified left image'); hold on; imshow(imglr); hold on;
plot(mlr(1, :), mlr(2, :), 'g*');
subplot(224); title('Rectified right image'); hold on; imshow(imgrr); hold on;
plot(mrr(1, :), mrr(2, :), 'r*');

%% EPIPOLAR LINES FOR THE LEFT IMAGE
% Compute the epipoles
[el, ~] = epipoles(Pnl, Pnr);
% Compute the fundamental matrix
F = fundamental(Pnl, Pnr, el);
% Pick five random points to draw the epipolar lines of
p = randperm(size(mrr, 2), 5);
figure();
subplot(121); title('Random points');hold on; imshow(imglr); hold on;
scatter(mlr(1, p), mlr(2, p), 'g*');
subplot(122); title('Epipolar lines of the random points'); hold on; 
imshow(imgrr); hold on;
% Compute and plot each of the picked points' epipolar line 
x = 1:size(imgrr, 2);
for i = p
    l = F * mlr(:, i);
    y = -(x * l(1) + l(3)) / l(2);
    scatter(mrr(1, i), mrr(2, i), 'r*'); hold on;
    plot(x, y);
end